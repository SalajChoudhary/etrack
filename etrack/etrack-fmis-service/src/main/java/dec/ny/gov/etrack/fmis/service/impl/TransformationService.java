package dec.ny.gov.etrack.fmis.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import dec.ny.gov.etrack.fmis.entity.FMISInvoice;
import dec.ny.gov.etrack.fmis.exception.BadRequestException;
import dec.ny.gov.etrack.fmis.model.BillingInvoiceRequest;
import dec.ny.gov.etrack.fmis.model.ProjectType;
import dec.ny.gov.etrack.fmis.util.FMISConstants;

@Service
public class TransformationService {


  private static final Logger logger =
      LoggerFactory.getLogger(TransformationService.class.getName());

  private final SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");

  
  /**
   * @param invoiceParam - Input invoice parameters
   * @param invoiceNumber - invoice number generated by invoice system
   * 
   * @return - FMIS Invoice entity
   */
  /**
   * Transform the invoice request details into entity which can be stored into E_INVOICE.
   * 
   * @param userId - User initiates this request
   * @param contextId - Unique id to track the transaction
   * @param projectId - Project id
   * @param applicantId - Primary applicant id
   * @param invoiceRequest - Invoice request payload.
   * @param transactionType - Transaction Type.
   * @param invoiceNumber - FMIS Invoice number.
   * @param invoiceDto - FMIS Invoice information.
   * @param decId - DEC ID.
   * 
   * @return - Updated FMIS invoice or new FMIS invoice.
   */
  public FMISInvoice transformInvoiceRequestToDto(final String userId, final String contextId,
      final Long projectId, final Long applicantId, final BillingInvoiceRequest invoiceRequest,
      final String transactionType, final String invoiceNumber, FMISInvoice invoiceDto, final String decId) {

    logger.info("Entering into transformInvoiceRequestToDto. User Id {}, Context Id {}", userId, contextId);

    if (FMISConstants.NEW_INVOICE.equals(transactionType)) {
      invoiceDto = new FMISInvoice();
      invoiceDto.setInvoiceStatusCode(FMISConstants.PAYMENT_PENDING);
      invoiceDto.setPublicId(applicantId);
      invoiceDto.setProjectId(projectId);
      invoiceDto.setCreateDate(new Date());
      invoiceDto.setCreatedById(userId);
      invoiceDto.setFmisInvoiceNum(invoiceNumber);
      invoiceDto.setDeleteInd(0);
      invoiceDto.setDecId(decId);
      invoiceDto.setCheckNumber(invoiceRequest.getCheckNumber());
      invoiceDto.setNotes(invoiceRequest.getNotes());
      try {
        if (StringUtils.hasLength(invoiceRequest.getCheckRcvdDate())) {
          invoiceDto.setCheckRcvdDate(dateFormat.parse(invoiceRequest.getCheckRcvdDate()));
        }
      } catch (Exception e) {
        throw new BadRequestException("RCVD_DATE_INVALID", "Check received date is invalid format " + invoiceRequest.getCheckRcvdDate());
      }
      invoiceDto.setCheckAmt(invoiceRequest.getCheckAmt());
      int index = 1;
      for (ProjectType projectType : invoiceRequest.getTypes()) {
        switch (index) {
          case 1:
            invoiceDto.setInvoiceFeeType1(projectType.getType());
            invoiceDto.setInvoiceFeeTypeFee1(projectType.getFee());
            break;
          case 2:
            invoiceDto.setInvoiceFeeType2(projectType.getType());
            invoiceDto.setInvoiceFeeTypeFee2(projectType.getFee());
            break;
          case 3:
            invoiceDto.setInvoiceFeeType3(projectType.getType());
            invoiceDto.setInvoiceFeeTypeFee3(projectType.getFee());
            break;
        }
        ++index;
      }
    } else if (FMISConstants.CANCEL_INVOICE.equals(transactionType)) {
      invoiceDto.setInvoiceStatusCode(FMISConstants.INVOICE_CANCELLED);
      invoiceDto.setNotes(invoiceRequest.getNotes());
      invoiceDto.setModifiedDate(new Date());
      invoiceDto.setModifiedById(userId);
      invoiceDto.setDeleteInd(1);
      invoiceDto.setCancelReason(invoiceRequest.getReason());
      invoiceDto.setCancelUserId(userId);
    }
    logger.info("Exiting from transformInvoiceRequestToDto. User Id {}, Context Id {}", userId, contextId);
    return invoiceDto;
  }
}
